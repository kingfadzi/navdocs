# .gitlab-ci-template.yml
# This is a reusable workflow for a single deployment type (e.g., baseline or functional).
# It is triggered by the main .gitlab-ci.yml file.
#
# Vault configurations are now dynamically determined from deployment-config.yaml
# based on the source_server (for extract) and target_server (for import/archive)
# specified in the BOM file.

include:
  - project: 'staging/vault-secret-fetcher'
    file: '/vault-retrieve.yml'

stages:
  - extract
  - import
  - archive

variables:
  # DEPLOYMENT_TYPE and BOM_FILE are passed in from the parent pipeline
  DEPLOYMENT_TYPE: "not-set"
  BOM_FILE: "not-set"

# Dynamic Vault configuration base
# Each job determines the appropriate server credentials from the BOM
.vault_dynamic_base:
  extends: .vault_retrieve
  variables:
    VAULT_DEBUG: "true"

extract:
  extends: .vault_dynamic_base
  stage: extract
  before_script:
    # Install Python first so we can run setup_vault_configs.py
    - dnf install -y -q python3.11
    - ln -sf /usr/bin/python3.11 /usr/bin/python3
    - pip3.11 install PyYAML --quiet
    # Set VAULT_CONFIGS dynamically from BOM source_server
    - echo "DEBUG - Generating VAULT_CONFIGS for extract stage..."
    - export VAULT_CONFIGS="$(python3 tools/setup_vault_configs.py $BOM_FILE extract)"
    - echo "DEBUG - VAULT_CONFIGS set to:"
    - echo "$VAULT_CONFIGS"
    - echo "DEBUG - Calling vault fetcher before_script..."
    # Now call the vault fetcher's before_script (which will read $VAULT_CONFIGS)
    - !reference [.vault_retrieve, before_script]
  script:
    - echo "Executing EXTRACT stage for $DEPLOYMENT_TYPE..."
    - python3 tools/deploy.py extract --type $DEPLOYMENT_TYPE --bom $BOM_FILE
  artifacts:
    paths:
      - bundles/*.yaml  # Only metadata YAML, not XML bundle files
    expire_in: 1 hour

import:
  extends: .vault_dynamic_base
  stage: import
  before_script:
    # Install Python first so we can run setup_vault_configs.py
    - dnf install -y -q python3.11
    - ln -sf /usr/bin/python3.11 /usr/bin/python3
    - pip3.11 install PyYAML --quiet
    # Set VAULT_CONFIGS dynamically from BOM target_server
    - echo "DEBUG - Generating VAULT_CONFIGS for import stage..."
    - export VAULT_CONFIGS="$(python3 tools/setup_vault_configs.py $BOM_FILE import)"
    - echo "DEBUG - VAULT_CONFIGS set to:"
    - echo "$VAULT_CONFIGS"
    - echo "DEBUG - Calling vault fetcher before_script..."
    # Now call the vault fetcher's before_script (which will read $VAULT_CONFIGS)
    - !reference [.vault_retrieve, before_script]
  script:
    - echo "Executing IMPORT stage for $DEPLOYMENT_TYPE..."
    - python3 tools/deploy.py import --type $DEPLOYMENT_TYPE --bom $BOM_FILE
  needs: [extract]

archive:
  extends: .vault_dynamic_base
  stage: archive
  before_script:
    # Install Python first so we can run setup_vault_configs.py
    - dnf install -y -q python3.11
    - ln -sf /usr/bin/python3.11 /usr/bin/python3
    - pip3.11 install PyYAML --quiet
    # Set VAULT_CONFIGS dynamically from BOM target_server
    - echo "DEBUG - Generating VAULT_CONFIGS for archive stage..."
    - export VAULT_CONFIGS="$(python3 tools/setup_vault_configs.py $BOM_FILE archive)"
    - echo "DEBUG - VAULT_CONFIGS set to:"
    - echo "$VAULT_CONFIGS"
    - echo "DEBUG - Calling vault fetcher before_script..."
    # Now call the vault fetcher's before_script (which will read $VAULT_CONFIGS)
    - !reference [.vault_retrieve, before_script]
  script:
    - echo "Executing ARCHIVE stage for $DEPLOYMENT_TYPE..."
    - python3 tools/deploy.py archive --type $DEPLOYMENT_TYPE --bom $BOM_FILE
  needs:
    - extract  # Need metadata artifacts
    - import   # Need to run after import completes
  artifacts:
    paths:
      - archives/*.yaml  # Only rollback manifests, not bundle ZIPs (bundles in S3)
      - evidence/
    expire_in: 1 year
