# Main PPM Deployment Pipeline
# This pipeline validates the consolidated BOM and then triggers reusable workflows.

stages:
  - validate
  - prepare
  - deploy

# Default configuration
default:
  image: almalinux:8
  before_script:
    # Install Python 3.11 from standard DNF repositories
    - dnf install -y -q git bash
    - dnf module reset -y python36
    - dnf install -y -q python3.11 python3.11-pip python3.11-devel
    - pip3.11 install PyYAML --quiet
    - ln -sf /usr/bin/python3.11 /usr/bin/python3

# ============================================================
# STAGE 1: VALIDATE
# ============================================================

validate:
  stage: validate
  script:
    - echo "Validating consolidated BOM file..."
    - python3 tools/validate_bom.py --file boms/deployment.yaml --branch "$CI_COMMIT_BRANCH"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - boms/deployment.yaml
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH =~ /^feature\//'
      changes:
        - boms/deployment.yaml

# ============================================================
# STAGE 2: PREPARE
# ============================================================

decide:
  stage: prepare
  script:
    - echo "Deciding which deployments to run using Python..."
    - |
      BASELINE_ENABLED=$(python3 -c "import yaml; print(str(yaml.safe_load(open('boms/deployment.yaml')).get('baseline', {}).get('enabled', False)).lower())")
      echo "BASELINE_ENABLED=${BASELINE_ENABLED}" >> build.env
    - |
      FUNCTIONAL_ENABLED=$(python3 -c "import yaml; print(str(yaml.safe_load(open('boms/deployment.yaml')).get('functional', {}).get('enabled', False)).lower())")
      echo "FUNCTIONAL_ENABLED=${FUNCTIONAL_ENABLED}" >> build.env
    - echo "Decision variables:"
    - cat build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - boms/deployment.yaml
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH =~ /^feature\//'
      changes:
        - boms/deployment.yaml

# ============================================================
# STAGE 3: DEPLOY
# ============================================================

deploy_baseline:
  stage: deploy
  needs: [decide]
  trigger:
    include:
      - local: templates/gitlab-ci-template.yml
    strategy: depend
  variables:
    DEPLOYMENT_TYPE: baseline
  rules:
    - if: '$BASELINE_ENABLED == "true"'

deploy_functional:
  stage: deploy
  needs: [decide, deploy_baseline] # Ensures baseline runs first if present
  trigger:
    include:
      - local: templates/gitlab-ci-template.yml
    strategy: depend
  variables:
    DEPLOYMENT_TYPE: functional
  rules:
    - if: '$FUNCTIONAL_ENABLED == "true"'
