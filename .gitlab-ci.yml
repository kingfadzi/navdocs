# Main PPM Deployment Pipeline
# This pipeline validates BOMs and triggers dynamic child pipelines for deployment.

stages:
  - validate
  - prepare
  - deploy

# Default configuration
default:
  image: python:3.11-slim
  before_script:
    - apt-get update -qq && apt-get install -y -qq git
    - pip install PyYAML --quiet

# ============================================================
# STAGE 1: VALIDATE
# (No changes needed here)
# ============================================================
validate_baseline:
  stage: validate
  script:
    - python3 -m tools.config.validation --file boms/baseline.yaml --branch "$CI_COMMIT_BRANCH"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - boms/baseline.yaml

validate_functional:
  stage: validate
  script:
    - python3 -m tools.config.validation --file boms/functional.yaml --branch "$CI_COMMIT_BRANCH"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - boms/functional.yaml

# ============================================================
# TEMPLATES FOR DRY WORKFLOWS
# ============================================================
.generate_template:
  stage: prepare
  script:
    - python3 -m tools.config.pipeline --bom $BOM_FILE > $ARTIFACT_NAME
  artifacts:
    paths:
      - $ARTIFACT_NAME
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $BOM_FILE
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH =~ /^feature\//'
      changes:
        - $BOM_FILE

.trigger_template:
  stage: deploy
  # Pass variables down to the child pipeline
  variables:
    BOM_FILE: $BOM_FILE
    DEPLOYMENT_TYPE: $DEPLOYMENT_TYPE
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $BOM_FILE
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH =~ /^feature\//'
      changes:
        - $BOM_FILE

# ============================================================
# BASELINE DEPLOYMENT WORKFLOW
# ============================================================
generate_baseline_pipeline:
  extends: .generate_template
  variables:
    BOM_FILE: boms/baseline.yaml
    ARTIFACT_NAME: baseline-pipeline.yml

trigger_baseline_deployment:
  extends: .trigger_template
  needs:
    - job: generate_baseline_pipeline
  variables:
    BOM_FILE: boms/baseline.yaml
    ARTIFACT_NAME: baseline-pipeline.yml
    DEPLOYMENT_TYPE: baseline
  trigger:
    include:
      - artifact: $ARTIFACT_NAME
        job: generate_baseline_pipeline
    strategy: depend

# ============================================================
# FUNCTIONAL DEPLOYMENT WORKFLOW
# ============================================================
generate_functional_pipeline:
  extends: .generate_template
  variables:
    BOM_FILE: boms/functional.yaml
    ARTIFACT_NAME: functional-pipeline.yml

trigger_functional_deployment:
  extends: .trigger_template
  needs:
    - job: generate_functional_pipeline
    - job: trigger_baseline_deployment
      optional: true
  variables:
    BOM_FILE: boms/functional.yaml
    ARTIFACT_NAME: functional-pipeline.yml
    DEPLOYMENT_TYPE: functional
  trigger:
    include:
      - artifact: $ARTIFACT_NAME
        job: generate_functional_pipeline
    strategy: depend