# PPM Deployment Pipeline
# Lean CI/CD pipeline using existing deploy.py script

stages:
  - validate
  - review
  - extract
  - import
  - archive

# Default configuration
default:
  image: almalinux:8
  before_script:
    # Install Python 3.11 on AlmaLinux 8
    - dnf install -y -q git bash
    - dnf module reset -y python36
    - dnf install -y -q python3.11 python3.11-pip python3.11-devel
    - pip3.11 install PyYAML --quiet
    - ln -sf /usr/bin/python3.11 /usr/bin/python3

# Variables
variables:
  BOM_DIR: "boms"


# ============================================================
# STAGE 1: VALIDATE
# Validates BOM schema and required fields
# ============================================================

validate:bom:
  stage: validate
  script:
    - echo "Validating BOM files..."
    - echo "Branch:$CI_COMMIT_BRANCH"
    - python3 tools/validate_bom.py --changed-files --branch "$CI_COMMIT_BRANCH"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml
    - if: '$CI_COMMIT_BRANCH =~ /^feature\//'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

# ============================================================
# STAGE 2: REVIEW (Prod Only)
# Manual gate to review BOM before deployment
# ============================================================

review:prod:
  stage: review
  script:
    - echo "============================================================"
    - echo "PRODUCTION DEPLOYMENT REVIEW"
    - echo "============================================================"
    - echo ""
    - echo "BOM pending deployment:"
    - |
      if git diff --name-only $CI_COMMIT_BEFORE_SHA...HEAD | grep -q "^boms/baseline.yaml$"; then
        echo "  - boms/baseline.yaml (baseline-repave)"
        cat boms/baseline.yaml
      elif git diff --name-only $CI_COMMIT_BEFORE_SHA...HEAD | grep -q "^boms/functional.yaml$"; then
        echo "  - boms/functional.yaml (functional-release)"
        cat boms/functional.yaml
      fi
    - echo ""
    - echo "Review the BOM file in this MR to verify:"
    - echo "  - Correct target server (prod)"
    - echo "  - Correct entities and reference codes"
    - echo "  - Proper rollback_artifact specified"
    - echo "  - Change request approved"
    - echo ""
    - echo "Click 'Approve' to proceed with deployment."
    - echo "============================================================"
  when: manual
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

# ============================================================
# STAGE 3: EXTRACT
# Extract entities from source server
# Creates bundles and deployment metadata
# ============================================================

.extract_template:
  stage: extract
  script:
    - echo "Extracting entities for ${DEPLOY_ENV} environment..."
    - |
      # Check if both BOMs changed (prevent accidental dual deployment)
      BASELINE_CHANGED=$(git diff --name-only $CI_COMMIT_BEFORE_SHA...HEAD | grep -c "^boms/baseline.yaml$" || true)
      FUNCTIONAL_CHANGED=$(git diff --name-only $CI_COMMIT_BEFORE_SHA...HEAD | grep -c "^boms/functional.yaml$" || true)

      if [ $BASELINE_CHANGED -gt 0 ] && [ $FUNCTIONAL_CHANGED -gt 0 ]; then
        echo "============================================================"
        echo "ERROR: Both baseline.yaml and functional.yaml changed"
        echo "============================================================"
        echo "Baseline and functional are different deployment types."
        echo "Create separate commits for each deployment type."
        echo "============================================================"
        exit 1
      fi

      # Determine which static BOM changed
      if [ $BASELINE_CHANGED -gt 0 ]; then
        BOM_FILE="boms/baseline.yaml"
      elif [ $FUNCTIONAL_CHANGED -gt 0 ]; then
        BOM_FILE="boms/functional.yaml"
      else
        echo "No baseline.yaml or functional.yaml changes detected"
        exit 0
      fi

      echo "BOM: $BOM_FILE"
      echo ""

      # Execute extract (skip validation - already done by validate:bom job)
      python3 tools/deploy.py extract --bom "$BOM_FILE" --skip-validation 2>&1 | tee extract.log

      # Capture exit code
      EXIT_CODE=${PIPESTATUS[0]}

      echo ""
      echo "Extract exit code: $EXIT_CODE"

      exit $EXIT_CODE
  artifacts:
    paths:
      - bundles/*.xml
      - bundles/deployment-metadata.yaml
      - extract.log
    expire_in: 7 days

extract:test:
  extends: .extract_template
  variables:
    DEPLOY_ENV: "TEST"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature\//'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

extract:staging:
  extends: .extract_template
  variables:
    DEPLOY_ENV: "STAGING"
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

extract:prod:
  extends: .extract_template
  variables:
    DEPLOY_ENV: "PROD"
  dependencies:
    - review:prod
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

# ============================================================
# STAGE 4: IMPORT
# Import bundles to target server
# ============================================================

.import_template:
  stage: import
  script:
    - echo "Importing bundles to ${DEPLOY_ENV} environment..."
    - python3 tools/deploy.py import --metadata bundles/deployment-metadata.yaml 2>&1 | tee import.log
    - |
      EXIT_CODE=${PIPESTATUS[0]}
      echo ""
      echo "Import exit code: $EXIT_CODE"
      exit $EXIT_CODE
  artifacts:
    when: always
    paths:
      - import.log
    expire_in: 30 days

import:test:
  extends: .import_template
  variables:
    DEPLOY_ENV: "TEST"
  dependencies:
    - extract:test
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature\//'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

import:staging:
  extends: .import_template
  variables:
    DEPLOY_ENV: "STAGING"
  dependencies:
    - extract:staging
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

import:prod:
  extends: .import_template
  variables:
    DEPLOY_ENV: "PROD"
  dependencies:
    - extract:prod
  artifacts:
    expire_in: 1 year
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

# ============================================================
# STAGE 5: ARCHIVE
# Create deployment archive, push to Nexus, create evidence
# ============================================================

.archive_template:
  stage: archive
  script:
    - echo "Archiving deployment for ${DEPLOY_ENV} environment..."
    - python3 tools/deploy.py archive --metadata bundles/deployment-metadata.yaml 2>&1 | tee archive.log
    - |
      EXIT_CODE=${PIPESTATUS[0]}
      echo ""
      echo "Archive exit code: $EXIT_CODE"
      exit $EXIT_CODE
    - echo "${DEPLOY_ENV} deployment complete"
  artifacts:
    paths:
      - archives/*.zip
      - evidence/*.zip
      - archive.log
      - boms/baseline.yaml
      - boms/functional.yaml

archive:test:
  extends: .archive_template
  variables:
    DEPLOY_ENV: "TEST"
  dependencies:
    - extract:test
  artifacts:
    expire_in: 30 days
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature\//'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

archive:staging:
  extends: .archive_template
  variables:
    DEPLOY_ENV: "STAGING"
  dependencies:
    - extract:staging
  artifacts:
    expire_in: 90 days
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

archive:prod:
  extends: .archive_template
  variables:
    DEPLOY_ENV: "PROD"
  dependencies:
    - extract:prod
  artifacts:
    expire_in: 1 year
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

# ============================================================
# ROLLBACK JOBS
# Manual rollback triggered within deployment pipeline
# Uses rollback_artifact from the same BOM that was deployed
# ============================================================

# Hidden template for all rollback jobs
.rollback_template:
  stage: deploy
  script:
    - echo "Rolling back ${DEPLOY_ENV} environment..."
    - |
      # Detect which BOM changed (same logic as deployment)
      BASELINE_CHANGED=$(git diff --name-only $CI_COMMIT_BEFORE_SHA...HEAD | grep -c "^boms/baseline.yaml$" || true)
      FUNCTIONAL_CHANGED=$(git diff --name-only $CI_COMMIT_BEFORE_SHA...HEAD | grep -c "^boms/functional.yaml$" || true)

      if [ $BASELINE_CHANGED -gt 0 ] && [ $FUNCTIONAL_CHANGED -gt 0 ]; then
        echo "ERROR: Both BOMs changed - cannot determine which to rollback"
        exit 1
      fi

      # Determine which BOM to use for rollback
      if [ $BASELINE_CHANGED -gt 0 ]; then
        BOM_FILE="boms/baseline.yaml"
      elif [ $FUNCTIONAL_CHANGED -gt 0 ]; then
        BOM_FILE="boms/functional.yaml"
      else
        echo "No BOM changes detected"
        exit 0
      fi

      echo "Rollback BOM: $BOM_FILE"
      echo ""

      # Execute rollback using rollback_artifact from BOM
      python3 tools/deploy.py rollback --bom "$BOM_FILE" 2>&1 | tee rollback.log

      # Capture exit code
      ROLLBACK_EXIT_CODE=${PIPESTATUS[0]}

      echo ""
      echo "Rollback exit code: $ROLLBACK_EXIT_CODE"

      exit $ROLLBACK_EXIT_CODE
    - echo "${DEPLOY_ENV} rollback complete"
  when: manual
  allow_failure: false
  artifacts:
    when: always
    paths:
      - rollback.log
      - evidence/*.zip
    expire_in: 1 year

rollback:test:
  extends: .rollback_template
  variables:
    DEPLOY_ENV: "TEST"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature\//'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

rollback:staging:
  extends: .rollback_template
  variables:
    DEPLOY_ENV: "STAGING"
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml

rollback:prod:
  extends: .rollback_template
  variables:
    DEPLOY_ENV: "PROD"
  dependencies:
    - review:prod
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - boms/baseline.yaml
        - boms/functional.yaml
